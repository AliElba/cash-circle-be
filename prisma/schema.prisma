generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  REGISTERED
  UNREGISTERED
}
enum CircleStatus {
  PENDING
  ACTIVE
  COMPLETED
}

enum MemberStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id        String   @id @default(cuid())
  phone     String?   @unique @default(cuid())// has to be available and uique even for unregistered users
  password  String?  // Nullable for unregistered users
  name      String?  @default("Ali Elba")
  status    UserStatus @default(REGISTERED) // REGISTERED, UNREGISTERED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  circlesOwned Circle[] @relation("CircleOwner")
  circleMemberships CircleMember[]
}

model Circle {
  id        String    @id @default(cuid())
  name      String
  owner     User      @relation("CircleOwner", fields: [ownerId], references: [id])
  ownerId   String
  members   CircleMember[]
  amount    Float     @default(0)

  status    CircleStatus @default(PENDING) // PENDING, ACTIVE, COMPLETED
  duration  Int       @default(10) // Duration in months
  startDate DateTime  @default(now())
  endDate   DateTime  @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model CircleMember {
  id           String        @id @default(cuid())
  circle       Circle        @relation(fields: [circleId], references: [id])
  circleId     String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  slotNumber   Int?
  status       MemberStatus @default(PENDING) // PENDING, CONFIRMED, REJECTED
  paymentStatus PaymentStatus @default(PENDING) // PENDING, COMPLETED, FAILED
  payoutDate   DateTime?
  adminFees    Float?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}